"""
Aidan Slattery

Functions to create and modify the variables space for the platform

"""

def create_variable_space(x, variables):
    """function to create a variables space from the list X and list of variables
    X and variables are from the INPUT_PICKLE generated by the GUI
    :param X: list
        List containing the sample concentration parameters and the residence
        time.
    :param variables:
        variables space so sampleinfo.py can correctly determine
        in the case that there is a mix of continuous and discrete outputs
    :return tuple
        Tuple containing
            residence_time: float,
            eagle_percentage: float,
            variable_space: list
        """
    # In the case that Eagle Percentage and Residence Time are not factors
    residence_time = None
    eagle_percentage = None
    i = 0
    variable_space = []
    while i < len(x):
        type = variables[i]['type']
        name = variables[i]['name']
        if name == 'residence_time':
            residence_time = x[i]
        elif name == 'eagle_percentage':
            eagle_percentage = x[i]
        elif type == 'float':
            name = variables[i]['name']
            value = x[i]
            variable_space.append(name)
            variable_space.append(value)
        elif type == 'discrete':
            name = x[i]
            value = x[i + 1]
            variable_space.append(name)
            variable_space.append(value)
            # if name == 'CF3SO2Na':
            #     variable_space.append(value*2)
            # else:
            #     variable_space.append(value)
            i += 1
        i += 1
    return(residence_time, eagle_percentage, variable_space)

def condition_convertor(conditions):
    """
    Function to scale the catalyst (Benzophenone, Fluorenone) loading

    :param conditions: List
        reaction condition list
    :return: List
        updated reaction condition list
    """

    # list of the photocatalysts. The one with low loading is listed in 0-4 positions; The one with higher loading is listed in 5-9 positions.
    catalyst_list = ['TBADT', 'EosinY', '4CzIPN', 'MesAcrClO4', 'Benzophenone', 'Fluorenone']
    if conditions[4] in catalyst_list:
        index = catalyst_list.index(
            conditions[4])  # return the index of the catalyst in the list
        if index < 4:
            pass
        else:
            new_loading = conditions[5] * 20  # Scale can be changed later.
            conditions[5] = new_loading
    return conditions

